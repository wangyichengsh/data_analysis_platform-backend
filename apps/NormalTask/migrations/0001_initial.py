# Generated by Django 2.2.5 on 2020-06-12 20:48

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DeveQueue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model_name', models.CharField(max_length=50, verbose_name='模型')),
                ('model_id', models.IntegerField(verbose_name='模型id')),
                ('next_id', models.IntegerField(verbose_name='模型id')),
                ('is_root', models.BooleanField(default=False, verbose_name='是否队首(t:队首，f:非队首)')),
                ('if_modify', models.BooleanField(default=False, verbose_name='是否调整位置')),
            ],
            options={
                'db_table': 'normaltask_queue',
            },
        ),
        migrations.CreateModel(
            name='ExecFunction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exec_id', models.IntegerField(help_text='执行器编号', verbose_name='执行器编号')),
                ('name', models.CharField(help_text='执行器中文名', max_length=30, verbose_name='执行器中文名')),
                ('func_name', models.CharField(help_text='执行器函数名', max_length=30, verbose_name='执行器函数名')),
                ('db_type', models.IntegerField(choices=[(0, '无'), (1, 'postgre主环境'), (2, 'postgre备环境'), (3, 'OracleP01'), (4, 'Oracle仿真'), (5, 'Oracle万得'), (6, '其他')], default=0, help_text='执行器所连数据库', verbose_name='执行器所连数据库')),
            ],
            options={
                'verbose_name': '解析器配置',
                'verbose_name_plural': '解析器配置',
                'db_table': 'normaltask_execfunction',
            },
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('upload_time', models.DateTimeField(auto_created=True, verbose_name='上传时间')),
                ('type', models.CharField(choices=[('req_file', '需求附件'), ('req_reason_file', '需求依据附件'), ('bug_file', '问题反馈附件'), ('res_file', '结果附件')], max_length=100, verbose_name='附件类型')),
                ('file_name', models.CharField(max_length=100, verbose_name='附件名称')),
                ('file_path', models.CharField(max_length=255, verbose_name='附件路径')),
                ('is_valid', models.BooleanField(default=True, verbose_name='是否有效')),
            ],
            options={
                'db_table': 'anlstool_file',
            },
        ),
        migrations.CreateModel(
            name='Input',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', help_text='输入字段名称', max_length=100, verbose_name='输入字段名称')),
                ('type', models.CharField(choices=[('Date', '日期'), ('DateTime', '时刻'), ('String', '字符'), ('Number', '数值'), ('File', '文件'), ('List', '列表')], help_text='输入字段类型', max_length=10, verbose_name='输入字段类型')),
                ('input_id', models.IntegerField(default=0, help_text='输入参数顺序', verbose_name='输入参数顺序')),
                ('detail', models.TextField(default='', verbose_name='输入字段描述')),
                ('default_value', models.CharField(blank=True, default='', help_text='输入字段默认值', max_length=30, null=True, verbose_name='输入字段默认值')),
                ('replace_key', models.CharField(default='', help_text='替换sql字段名', max_length=100, verbose_name='替换sql字段名')),
            ],
            options={
                'verbose_name': '输入参数',
                'verbose_name_plural': '输入参数',
                'db_table': 'normaltask_input',
            },
        ),
        migrations.CreateModel(
            name='ParentTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seq', models.IntegerField(verbose_name='需求编号')),
                ('title', models.CharField(max_length=100, verbose_name='标题')),
                ('type', models.CharField(choices=[('功能需求 ', (('业务预研', '业务预研'), ('应急功能', '应急功能'))), ('计算需求 ', (('数据协查', '数据协查'), ('数据测算', '数据测算')))], max_length=100, verbose_name='需求类型')),
                ('priority', models.IntegerField(choices=[(1, '特急'), (2, '一般')], default=2, verbose_name='优先级')),
                ('desc', models.TextField(verbose_name='需求描述')),
                ('reason', models.TextField(verbose_name='需求依据')),
                ('deadline', models.DateField(blank=True, null=True, verbose_name='截止时间')),
                ('status', models.CharField(blank=True, choices=[('wait', '待技术人员评估'), ('conforming', '待业务人员确认'), ('conformed', '已确认'), ('developing', '开发中'), ('accepting', '验收中'), ('finished', '已完成'), ('cancel', '已取消'), ('check', '审核中'), ('failed', '审核不通过')], max_length=50, verbose_name='需求状态')),
                ('is_valid', models.BooleanField(default=True, verbose_name='是否有效')),
                ('is_model', models.BooleanField(default=False, verbose_name='是否为专项模块')),
                ('mod_url', models.CharField(default='', max_length=100, verbose_name='专项模块路由')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('confirm_time', models.DateTimeField(blank=True, null=True, verbose_name='确认时间')),
                ('closed_time', models.DateTimeField(blank=True, null=True, verbose_name='关闭时间')),
                ('canceled_time', models.DateTimeField(blank=True, null=True, verbose_name='取消时间')),
                ('canceled_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='req_canceled_by', to=settings.AUTH_USER_MODEL, verbose_name='由谁取消')),
                ('closed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='req_closed_by', to=settings.AUTH_USER_MODEL, verbose_name='由谁关闭')),
                ('confirm_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='req_confirm_by', to=settings.AUTH_USER_MODEL, verbose_name='由谁确认')),
                ('create_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='req_create_by', to=settings.AUTH_USER_MODEL, verbose_name='由谁创建')),
                ('reason_file', models.ManyToManyField(blank=True, related_name='reason_files', related_query_name='reason_file', to='NormalTask.File', verbose_name='需求依据附件')),
                ('requirment_files', models.ManyToManyField(blank=True, related_name='req_files', related_query_name='req_file', to='NormalTask.File', verbose_name='需求附件')),
            ],
            options={
                'verbose_name': '父任务',
                'verbose_name_plural': '父任务',
                'db_table': 'normaltask_parenttask',
            },
        ),
        migrations.CreateModel(
            name='QueueChangeRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('change_time', models.DateTimeField(default=datetime.datetime.now, verbose_name='修改时间')),
                ('model_name', models.CharField(max_length=50, verbose_name='模型')),
                ('model_id', models.IntegerField(verbose_name='模型id')),
                ('prev_id', models.IntegerField(verbose_name='前序id')),
                ('change_reason', models.TextField(blank=True, null=True, verbose_name='修改原因')),
            ],
            options={
                'db_table': 'normaltask_queuechg',
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='标题')),
                ('level', models.IntegerField(choices=[(1, '特级'), (2, '一般')], default=2, verbose_name='级别')),
                ('type', models.CharField(choices=[('file', '输出结果文件'), ('module', '输出查询功能')], max_length=100, verbose_name='任务类型')),
                ('status', models.CharField(choices=[('confirming', '待确认'), ('ranking', '排队中'), ('developing', '开发中'), ('finished', '已完成'), ('repairing', 'BUG修复中')], default='confirming', max_length=50, verbose_name='任务状态')),
                ('desc', models.TextField(verbose_name='任务描述')),
                ('deadline', models.DateField(blank=True, null=True, verbose_name='截止时间')),
                ('create_time', models.DateTimeField(default=datetime.datetime.now, verbose_name='创建时间')),
                ('assign_time', models.DateTimeField(blank=True, null=True, verbose_name='指派时间')),
                ('finish_time', models.DateTimeField(blank=True, null=True, verbose_name='完成时间')),
                ('consumed_hours', models.IntegerField(blank=True, null=True, verbose_name='耗时(小时)')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('if_valid', models.BooleanField(verbose_name='有效标志(1:有效,0:无效)')),
                ('if_model', models.BooleanField(default=False, verbose_name='是否为模块')),
                ('creater', models.ForeignKey(default=58, on_delete=django.db.models.deletion.SET_DEFAULT, related_name='task_create', to=settings.AUTH_USER_MODEL, verbose_name='创建人员')),
                ('developer', models.ForeignKey(default='', on_delete=django.db.models.deletion.SET_DEFAULT, related_name='task_develop', to=settings.AUTH_USER_MODEL, verbose_name='开发人员')),
                ('finish_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='task_finish_by', to=settings.AUTH_USER_MODEL, verbose_name='由谁完成')),
            ],
            options={
                'verbose_name': '子任务',
                'verbose_name_plural': '子任务',
                'db_table': 'normaltask_sontask',
            },
        ),
        migrations.CreateModel(
            name='Version',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version_id', models.IntegerField(verbose_name='子任务版本编号')),
                ('version_num', models.IntegerField(verbose_name='版本号')),
                ('demand_seq', models.IntegerField(verbose_name='需求编号')),
                ('if_exec', models.BooleanField(default=True, verbose_name='是否可执行')),
                ('parent_task', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='NormalTask.ParentTask', verbose_name='需求')),
                ('son_task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='NormalTask.Task', verbose_name='子任务')),
            ],
            options={
                'verbose_name': '版本',
                'verbose_name_plural': '版本',
                'db_table': 'normaltask_version',
            },
        ),
        migrations.CreateModel(
            name='SqlCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sql_id', models.IntegerField(help_text='执行顺序', verbose_name='执行顺序')),
                ('code', models.TextField(default='', help_text='SQL代码', verbose_name='SQL代码')),
                ('file_type', models.IntegerField(choices=[(0, '不替换参数'), (1, '参数替换')], help_text='代码类型', verbose_name='代码类型')),
                ('display', models.IntegerField(choices=[(0, '展示'), (1, '不展示')], help_text='是否展示结果', verbose_name='是否展示结果')),
                ('replace_style', models.IntegerField(choices=[(0, '%(name)s'), (1, '#{name}')], default=0, help_text='占位符替换风格', verbose_name='占位符替换风格')),
                ('if_mulit', models.BooleanField(blank=True, default=False, null=True, verbose_name='是否为跨库导数据sql(t:跨库，f:不跨库)')),
                ('from_conn', models.IntegerField(blank=True, help_text='数据来源数据库id', null=True, verbose_name='数据来源数据库id')),
                ('to_conn', models.IntegerField(blank=True, help_text='数据导入数据库id', null=True, verbose_name='数据导入数据库id')),
                ('table_name', models.CharField(blank=True, default='', help_text='数据导入表名', max_length=100, null=True, verbose_name='数据导入表名')),
                ('if_create', models.BooleanField(blank=True, default=False, null=True, verbose_name='是否建表(t:建表，f:不建表)')),
                ('if_temp', models.BooleanField(blank=True, default=False, null=True, verbose_name='是否建为临时表(t:建临时表，f:不建临时表)')),
                ('exec_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='NormalTask.ExecFunction', verbose_name='解析所用数据库')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='NormalTask.Task', verbose_name='子任务')),
            ],
            options={
                'verbose_name': 'sql代码',
                'verbose_name_plural': 'sql代码',
                'db_table': 'normaltask_sqlcode',
            },
        ),
        migrations.CreateModel(
            name='OutputSheet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sheet_output_id', models.IntegerField(help_text='输出表格编号', verbose_name='输出表格编号')),
                ('name', models.CharField(default='', help_text='输出表格名称', max_length=100, verbose_name='输出表格名称')),
                ('detail', models.TextField(blank=True, default='', help_text='输出表格算法描述', null=True, verbose_name='输出表格算法描述')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='NormalTask.Task', verbose_name='子任务')),
            ],
            options={
                'verbose_name': '输出Sheet页名称',
                'verbose_name_plural': '输出Sheet页名称',
                'db_table': 'normaltask_outputsheet',
            },
        ),
        migrations.CreateModel(
            name='OutputColumn',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', help_text='输出字段名称', max_length=100, verbose_name='输出字段名称')),
                ('detail', models.TextField(default='', verbose_name='输出字段描述')),
                ('replace_key', models.CharField(default='', help_text='输出字段替换字段', max_length=100, verbose_name='输出字段替换字段')),
                ('sheet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='NormalTask.OutputSheet', verbose_name='输出Sheet页')),
            ],
            options={
                'verbose_name': '输出字段',
                'verbose_name_plural': '输出字段',
                'db_table': 'normaltask_outputcolumn',
            },
        ),
        migrations.CreateModel(
            name='JobHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(default=datetime.datetime.now, verbose_name='创建时间')),
                ('renew_time', models.DateTimeField(default=datetime.datetime.now, verbose_name='更新时间')),
                ('input_json', models.TextField(default='{}', help_text='输入参数json', verbose_name='输入参数json')),
                ('input_file', models.TextField(default='[]', help_text='查询上传文件', verbose_name='查询上传文件')),
                ('res_file', models.TextField(default='[]', help_text='结果文件', verbose_name='结果文件')),
                ('exec_status', models.SmallIntegerField(choices=[(0, '查询中'), (1, '执行成功'), (2, 'sql执行失败'), (3, 'python执行失败'), (4, '临时表插入失败')], default=0, help_text='执行结果', verbose_name='执行结果')),
                ('exec_info', models.TextField(default='', help_text='python报错信息', verbose_name='python报错信息')),
                ('sql_done', models.SmallIntegerField(default=0, help_text='sql完成数量', verbose_name='sql完成数量')),
                ('sql_all', models.SmallIntegerField(default=0, help_text='sql总数', verbose_name='sql总数')),
                ('pid', models.IntegerField(default=0, help_text='进程号', verbose_name='进程号')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='NormalTask.Task', verbose_name='子任务')),
                ('user', models.ForeignKey(default='', on_delete=django.db.models.deletion.SET_DEFAULT, to=settings.AUTH_USER_MODEL, verbose_name='查询用户')),
            ],
            options={
                'verbose_name': '常规查询执行历史记录',
                'verbose_name_plural': '常规查询执行历史记录',
                'db_table': 'normaltask_jobhistory',
            },
        ),
        migrations.CreateModel(
            name='InputFileSheet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', help_text='表格sheet对应的elk临时表表名', max_length=100, verbose_name='表格sheet对应的elk临时表表名')),
                ('sheet_id', models.IntegerField(help_text='上传表格sheet页编号', verbose_name='上传表格sheet页编号')),
                ('exec_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='NormalTask.ExecFunction', verbose_name='临时表写入所用数据库')),
                ('input', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='NormalTask.Input', verbose_name='文件输入字段')),
            ],
            options={
                'verbose_name': '文件输入Sheet',
                'verbose_name_plural': '文件输入Sheet',
                'db_table': 'normaltask_inputfilesheet',
            },
        ),
        migrations.CreateModel(
            name='InputFileColumn',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', help_text='表格列名，同时也是插入elk表格中的列名', max_length=30, verbose_name='字段名')),
                ('type', models.CharField(default='', help_text='写入数据库的字段类型', max_length=30, verbose_name='字段类型')),
                ('sheet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='NormalTask.InputFileSheet', verbose_name='文件输入Sheet页')),
            ],
            options={
                'verbose_name': '文件输入字段',
                'verbose_name_plural': '文件输入字段',
                'db_table': 'normaltask_inputfilecolumn',
            },
        ),
        migrations.AddField(
            model_name='input',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='NormalTask.Task', verbose_name='子任务'),
        ),
        migrations.CreateModel(
            name='File2Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='NormalTask.File', verbose_name='结果文件')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='NormalTask.Task', verbose_name='子任务')),
            ],
            options={
                'verbose_name': '结果文件表',
                'verbose_name_plural': '结果文件表',
                'db_table': 'normaltask_file2task',
            },
        ),
        migrations.CreateModel(
            name='ChangeHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model_name', models.CharField(max_length=50, verbose_name='模型')),
                ('change_id', models.IntegerField(verbose_name='变动记录id')),
                ('field_name', models.CharField(max_length=50, verbose_name='字段')),
                ('old', models.TextField(blank=True, null=True, verbose_name='旧值')),
                ('new', models.TextField(blank=True, null=True, verbose_name='新值')),
                ('change_time', models.DateTimeField(default=datetime.datetime.now, verbose_name='修改时间')),
                ('remark', models.TextField(blank=True, null=True, verbose_name='备注')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'db_table': 'normaltask_demandhistory',
            },
        ),
    ]
