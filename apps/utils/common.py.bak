import logging,os
import configparser
import psycopg2
import cx_Oracle
import time
from decimal import Decimal, getcontext
import pyodbc
import sqlparse
import sys

config = configparser.ConfigParser()
config.read(os.path.join(os.path.dirname(__file__),'conf/db.conf'))
logger = logging.getLogger('main.utils')

fetchsize = 100000
getcontext().prec = 8

def Exec(code,l,replace_dict,orc_all,psgconn,fz,p01):
    try:
        logger.info(code)
        exec(code)
        return {'msg':'','res':[]}
    except Exception as e:
        return {'msg':str(e)}

def getConn(conf_name):
    try:
        db_type = config[conf_name]['db_type']
        if 'postgre' == db_type:            
            if sys.platform == "linux":
                conn = psycopg2.connect(host=config[conf_name]['host'], \
                                       user=config[conf_name]['user'], \
                                       password=config[conf_name]['password'], \
                                       port=int(config[conf_name]['port']), \
                                       database=config[conf_name]['database'])
                conn.set_client_encoding('latin1')
                conn.set_session(True)
                return conn
            else:
                conn = pyodbc.connect('DSN=PostgreSQL30')
                return conn
        elif 'oracle' == db_type:
            conn = cx_Oracle.connect(config[conf_name]['user'],config[conf_name]['password'],str(config[conf_name]['host'])+':'+str(config[conf_name]['port'])+'/'+str(config[conf_name]['database']),encoding='gbk')
            return conn
    except Exception as e:
        conn = None
        logger.error('Conn Init Error:'+str(e))
        return conn
    
def execcode(sql,conf_name,conn=None, orient='records', **kwargs):
    res_all = []
    if 'exec'== conf_name:
        Exec(sql,kwargs['l'],kwargs['replace_dict'],kwargs['orc_all'],kwargs['psgconn'],kwargs['fz'],kwargs['p01'])
        return {"res":res_all,"msg":"","sql":""}
    try:
        P = sys.platform
        if conn == None:
            conn = getConn(conf_name)
        # sql = sql.strip()
        # if sql.endswith(';'):
            # sql = sql.split(';')[:-1]
        # else:
            # sql = sql.split(';')
        sql_list = sqlparse.split(sql)
        for code in sql_list:
            if len(code.strip())==0:
                continue
            try:
                if hasattr(conn, 'ping'):
                    code = code.strip().strip(';')
                else:
                    conn.set_client_encoding('gbk')
                cur = conn.cursor()
                # code = code.encode('gbk').decode('latin1')
                cur.execute(code)
                conn.commit()
                if not hasattr(conn, 'ping'):
                    conn.set_client_encoding('latin1')
                if cur.description != None:
                    res = list(cur.fetchmany(fetchsize))
                    if orient=='records':
                        rowname = [x[0] for x in cur.description]
                    elif orient=='raw':
                        rowname = [list(x) for x in cur.description]
                    result = []
                    if len(res) < fetchsize:
                        if orient=='records':
                            for row in res:
                                d ={}
                                for i,col in enumerate(rowname):
                                    if isinstance(row[i],Decimal) or isinstance(row[i],float) or isinstance(row[i],int):
                                        d[col] = float(row[i])
                                    elif type(row[i]) == str and P == "linux" and not hasattr(conn, 'ping'):
                                        d[col] = row[i].encode('latin1').decode('gbk',errors='replace')
                                    else:
                                        d[col] = row[i]
                                result.append(d)
                        elif orient=='raw':
                            result.extend(list(res))
                        if orient=='raw':
                            t = {}
                            t['description'] = rowname
                            t['data'] = result
                            result = t
                        res_all.append(result)
                    else:
                        while len(res)>0:
                            if orient=='records':
                                for row in res:
                                    d ={}
                                    for i,col in enumerate(rowname):
                                        if isinstance(row[i],Decimal) or isinstance(row[i],float) or isinstance(row[i],int):
                                            d[col] = float(row[i])
                                        elif type(row[i]) == str and P == "linux" and  not hasattr(conn, 'ping'):
                                            d[col] = row[i].encode('latin1').decode('gbk',errors='replace')
                                        else:
                                            d[col] = row[i]
                                    result.append(d)
                            elif orient=='raw':
                                result.extend(list(res))                 
                            res = list(cur.fetchmany(fetchsize))
                        if orient=='raw':
                            t = {}
                            t['description'] = rowname
                            t['data'] = result
                            result = t
                        res_all.append(result)
                cur.close()
            except Exception as e:
                logger.error('--------------------------------------------------')
                logger.error(conf_name+' Error:'+str(e))
                logger.error('SQL:'+str(code))
                res_all.append([{'msg':str(e),'sql':str(code)}])
                logger.error('--------------------------------------------------')
        return {"res":res_all,"msg":"","sql":""}
    except Exception as e:
        try:
            conn.rollback()
        except:
            pass
        logger.error('--------------------------------------------------')
        logger.error(conf_name+' Error:'+str(e))
        logger.error('SQL:'+str(sql))
        logger.error('--------------------------------------------------')
        return {"res":[{'msg':str(e),'sql':str(sql)}],"msg":str(e),"sql":str(sql)}
        
if __name__ =="__main__":
    sql = '''select * from pd_data.ctl_tx_date where trade_date < '2019-01-10' limit 5;'''
    conf_name = 'PGDev'
    # sql = 'select 1 from dual'    
    # conf_name = 'OracleDev'
    print(execcode(sql,conf_name,orient='raw'))
